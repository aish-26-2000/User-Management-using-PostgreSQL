const cron = require('node-cron');
const date = require('date-fns');
const db = require('../../database/models');
const sendEmail = require('../../utils/email');
const { generateAccessToken } = require('../../utils/jwt');

// get date
const startOfDay = date.startOfDay(new Date());
const endOfDay = date.endOfDay(new Date());
const today = { $gte: startOfDay, $lte: endOfDay };

// count function
const count = async (model) => {
    const n = await model.count({ createdAt: today });
    return n;
};

// filter function
const filter = async (model, filter) => {
    const n = await model.count(filter);
    return n;
};

// autogenerated report
exports.autoReport = async () => {
    try {
        // counts
        const inviteCount = await count(db.Invite);
        const userCount = await count(db.User);
        const regUserCount = await filter(db.Invite, { regStatus: 'completed', createdAt: today });
        const awaitingUserCount = await filter(db.Invite, { regStatus: 'pending', createdAt: today });
        const activeUserCount = await filter(db.Invite, { active: true, createdAt: today });

        const message = `This is an auto-generated email.\nStandardC User Registration Report \n\nDated On:${new Date()} \n 
                    Invite Mails : ${inviteCount} \n
                    Users : ${userCount} \n
                    Registered Users : ${regUserCount} \n
                    Awaiting Users : ${awaitingUserCount} \n
                    Active Users : ${activeUserCount}`;

        // scheduled on 23.55 everyday
        cron.schedule('00 01 * * * *', async () => {
            await sendEmail({
                from: 'no-reply@standardc.com',
                to: 'ADMIN <admin@standardc.com>',
                subject: 'StandardC User Details',
                message: message,
            });
        });
    } catch (err) {
        err;
    }
};

// change password notification
exports.changePasswordNotification = async (req, res, email) => {
    try {
        // generate accesstoken and URL
        const accessToken = generateAccessToken(email);
        const resetURL = `${req.protocol}://${req.get('host')}/api/v1/user/changePassword/${accessToken}`;

        const message = 'This is a reminder to change the password before expiration.';
        const html = `<!doctype html>
        <html ⚡4email>
        <head>
            <meta charset="utf-8">
        </head>
        <body>
            <p>Hi, Greetings from StandardC! </p>
            <p>Your password will be expiring soon. 
            <br>Login to your StandardC account and update now. Note this as a reminder to change your password to prevent expiration.
            Submit a POST request with all your details and update your password to to recover your account.</p>
            <p> <a href=${resetURL}> Reset Now </a></p>
            <br>This link will expire after 1 day
            <br>This is an auto-generated email.You are receiving this email because this is an important message regarding your account and products you are using.
        </body>
        </html>`;
        // scheduled
        await sendEmail({
            from: 'no-reply@standardc.com',
            to: email,
            subject: 'Password Expiration Reminder',
            html,
            message: message,
        });

        return resetURL;
    } catch (err) {
        err;
    }
};

// password expiration
exports.passwordExpiryNotification = async (req, res, email) => {
    try {
        // generate accesstoken and URL
        const accessToken = generateAccessToken(email);
        const resetURL = `${req.protocol}://${req.get('host')}/api/v1/user/changePassword/${accessToken}`;

        const message =
            'Your password is expired.Submit a POST request with all your details and update your password to to recover your account.';
        const html = `<!doctype html>
        <html ⚡4email>
        <head>
            <meta charset="utf-8">
        </head>
        <body>
            <p>Hi, Greetings from StandardC! </p>
            <p>Your password is expired.
            Submit a POST request with all your details and update your password to to recover your account.</p>
            <p> <a href=${resetURL}> Reset Now </a></p>
            <br>This link will expire after 1 day</p>
            <br>This is an auto-generated email.You are receiving this email because this is an important message regarding your account and products you are using.
        </body>
        </html>`;
        // send
        await sendEmail({
            from: 'no-reply@standardc.com',
            to: email,
            subject: 'Password Expired',
            html,
            message: message,
        });

        return resetURL;
    } catch (err) {
        err;
    }
};

// reminders
exports.changePasswordReminders = async () => {
    try {
        const message = 'This is a reminder to change the password before expiration.';
        const html = `<!doctype html>
        <html ⚡4email>
        <head>
            <meta charset="utf-8">
        </head>
        <body>
            <p>Hi, Greetings from StandardC! </p>
            <p>Your password will be expiring soon.
            <br>Login to your StandardC account and update now. Note this as a reminder to change your password to prevent expiration.</p>
            <br>This is an auto-generated email.You are receiving this email because this is an important message regarding your account and products you are using.
        </body>
        </html>`;

        /* const users = await db.User.findAll({ 
            where: sequelize.where(Sequelize.fn('datediff', Sequelize.fn("NOW") , Sequelize.col('pass_changetime')), {
                [Op.gt] : 4
            })
        }) */
        const users = await db.User.findAll();
        const mailList = users.map((ele) => {
            if (ele.passChangeInterval > 4 && ele.passChangeInterval < 7) {
                return ele.email;
            }
        });
        mailList.forEach((email) => {
            // scheduled at 9.30 everyday
            cron.schedule('30 09 * * *', async () => {
                await sendEmail({
                    from: 'no-reply@standardc.com',
                    to: email,
                    subject: 'Password Expiration Reminder',
                    html,
                    message: message,
                });
            });
        });
    } catch (err) {
        err;
    }
};
